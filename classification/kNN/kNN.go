/*************************************************************************************************************************************
 * 목표
 * 측정 수치를 기반으로 붓꽃의 품종을 예측할 수 있는 kNN분류기를 만드는 것
 * 품종이 세 가지가 있고 이를 세 개의 클래스로 나눌 수 있으므로, 다중 클래스 분류 문제에 해당
 * (로지스틱 회귀분석에서 했던 이진 분류와 대조적)
*************************************************************************************************************************************/

/*************************************************************************************************************************************
 * 훈련, 테스트, 교차검증의 장점 활용
 * github.com/sjwhitworth/golearn에서 제공하는 모델을 사용하려면 데이터를 먼저 인스턴스라 불리는 golearn의 내부 포맷으로 변환해야한다.
*************************************************************************************************************************************/

package main

import (
	"fmt"
	"log"
	"math"

	"github.com/sjwhitworth/golearn/base"
	"github.com/sjwhitworth/golearn/evaluation"
	"github.com/sjwhitworth/golearn/knn"
)

func Error(e error) {
	if e != nil {
		log.Fatal(e)
	}
}

func main() {
	//붓꽃 데이터 집합을 읽고 golearn 인스턴스로 설정한다.
	irisData, err := base.ParseCSVToInstances("iris.data", true)
	Error(err)

	/*************************************************************************************************************************************
	 * kNN모델을 초기화하고 교차검증을 수행
	 *************************************************************************************************************************************/

	//새 kNN분류기를 초기화한다. 간단한 유클리드 거리 측정법과 k = 2를 사용한다.
	knn := knn.NewKnnClassifier("euclidean", "linear", 2)

	//5겹의 데이터 집합을 기반으로 모델을 성공적으로 훈련시키고 평가하기 위해
	//k-fold 교차 검증을 사용한다.

	cv, err := evaluation.GenerateCrossFoldValidationConfusionMatrices(irisData, knn, 5)
	Error(err)

	/*************************************************************************************************************************************
	 * 마지막으로 5겹의 교차 검증에 대한 평균 정확도를 구하고 표준출력을 통해 앞에서 구한 정확도를 출력한다.
	*************************************************************************************************************************************/
	//교차검증의 정확도에 대한 평균, 분산, 표준편차를 구한다.
	mean, variance := evaluation.GetCrossValidatedMetric(cv, evaluation.GetAccuracy)
	stdev := math.Sqrt(variance)

	//표준출력을 통해서 교차 측정법의 결과를 출력한다.
	fmt.Printf("\n정확도\n %.2f (+/- %.2f)\n\n", mean, stdev*2)

}

/*************************************************************************************************************************************
*************************************************************************************************************************************/
